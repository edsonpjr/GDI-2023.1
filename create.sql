-- OK
CREATE TABLE PERSON (
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    BIO VARCHAR2(1000),
    PICTURE BLOB, --blob armazena imagens
    CONSTRAINT PK_PERSON PRIMARY KEY (ID)
);

--OK
CREATE TABLE USER_ (
    ID INT,
    NICK CHAR(25),
    USER_PASSWORD CHAR(64),
    EMAIL VARCHAR2(255),
    WATCHED INT, --criar trigger
    CREATION_DATE DATE,
    CONSTRAINT PK_USER PRIMARY KEY (ID),
    CONSTRAINT FK_PERSON FOREIGN KEY (ID) REFERENCES PERSON(ID)
);

--OK
CREATE TABLE FAVORITE_MOVIES (
    ID INT,
    FAVORITE_MOVIES VARCHAR(255),
    CONSTRAINT PK_FAVORITE_MOVIES PRIMARY KEY (ID, FAVORITE_MOVIES),
    CONSTRAINT FK_FAVORITE_MOVIES_USER FOREIGN KEY (ID) REFERENCES USER_(ID)
);

--OK
CREATE TABLE CREW_MEMBER (
    ID INT,
    CREW_NAME VARCHAR2(255),
    N_ACTED NUMBER, --criar trigger
    N_DIRECTED NUMBER, --criar trigger
    N_PRODUCED NUMBER, --criar trigger
    CONSTRAINT PK_CREW_MEMBER PRIMARY KEY (ID),
    CONSTRAINT FK_CREW_MEMBER_PERSON FOREIGN KEY (ID) REFERENCES PERSON(ID)
);

--OK
CREATE TABLE LIST_MOVIES (
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    DESCRIPTION_ VARCHAR2(255),
    LIST_NAME VARCHAR2(255),
    CREATION_DATE DATE,
    ID_USER INT,
    CONSTRAINT PK_LIST PRIMARY KEY (ID),
    CONSTRAINT FK_LIST_USER FOREIGN KEY (ID_USER) REFERENCES USER_(ID)
);

--OK
CREATE TABLE MOVIE (
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    AVERAGE_GRADE NUMBER, --criar trigger
    MOVIE_NAME VARCHAR2(255),
    COVER BLOB,
    D_SYNOSPSIS VARCHAR2(1000),
    D_YEAR NUMBER(4),
    D_DURATION NUMBER,
    CONSTRAINT PK_MOVIE PRIMARY KEY (ID)
);

--OK
CREATE TABLE GENRE (
    ID INT,
    MOVIE_GENRE VARCHAR2(255),
    CONSTRAINT PK_GENRE PRIMARY KEY (ID,MOVIE_GENRE),
    CONSTRAINT FK_GENRE_MOVIE FOREIGN KEY (ID) REFERENCES MOVIE(ID)
);

--OK
CREATE TABLE CRITICS_REVIEW (
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    TEXT VARCHAR2(1000),
    ID_MOVIE INT NOT NULL UNIQUE,
    CONSTRAINT PK_CRITICS_REVIEW PRIMARY KEY (ID),
    CONSTRAINT FK_CRITICS_REVIEW_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID)
);

--OK
CREATE TABLE WATCHES_ (
    ID_MOVIE INT,
    ID_USER INT,
    TIME_STAMP TIMESTAMP,
    GRADE NUMBER, --CRIAR trigger
    CONSTRAINT PK_WATCHES PRIMARY KEY (ID_MOVIE, ID_USER, TIME_STAMP),
    CONSTRAINT FK_WATCHES_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID),
    CONSTRAINT FK_WATCHES_USER FOREIGN KEY (ID_USER) REFERENCES USER_(ID)
);

CREATE TABLE REVIEW_ (
    ID_USER NUMBER,
    ID_MOVIE NUMBER,
    WATCH_TIME_STAMP TIMESTAMP,
    RVW_TIMESTAMP TIMESTAMP,
    TEXT VARCHAR2(1000),
    DATE_WATCHED DATE,
    CONSTRAINT PK_REVIEW PRIMARY KEY (ID_USER, ID_MOVIE, WATCH_TIME_STAMP, RVW_TIMESTAMP),
    CONSTRAINT FK_REVIEW_USER FOREIGN KEY (ID_USER) REFERENCES USER_(ID),
    CONSTRAINT FK_REVIEW_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID),
    CONSTRAINT FK_REVIEW_WATCH FOREIGN KEY (ID_MOVIE, ID_USER, WATCH_TIME_STAMP) REFERENCES WATCHES_(ID_MOVIE, ID_USER, TIME_STAMP)
);

--OK
CREATE TABLE CONTAINS (
    ID_LIST INT,
    ID_MOVIE INT,
    CONSTRAINT PK_CONTAINS PRIMARY KEY (ID_LIST, ID_MOVIE),
    CONSTRAINT FK_CONTAINS_LIST FOREIGN KEY (ID_LIST) REFERENCES LIST_MOVIES(ID),
    CONSTRAINT FK_CONTAINS_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID)
);

--DUVIDA NO ROLE
CREATE TABLE PLAYED_BY (
    ID_MOVIE NUMBER,
    ID_CREW NUMBER,
    ROLE_ VARCHAR2(255),
    CONSTRAINT PK_PLAYED_BY PRIMARY KEY (ID_MOVIE, ID_CREW, ROLE_),
    CONSTRAINT FK_PLAYED_BY_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID),
    CONSTRAINT FK_PLAYED_BY_CREW FOREIGN KEY (ID_CREW) REFERENCES CREW_MEMBER(ID)
);

--DUVIDA NO DIRECTOR_ID
CREATE TABLE DIRECTS (
    ID_MOVIE NUMBER,
    ID_CREW NUMBER,
    DIRECTOR_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    CONSTRAINT PK_DIRECTS PRIMARY KEY (ID_MOVIE, ID_CREW, DIRECTOR_ID),
    CONSTRAINT FK_DIRECTS_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID),
    CONSTRAINT FK_DIRECTS_CREW FOREIGN KEY (ID_CREW) REFERENCES CREW_MEMBER(ID)
);

--OK (OS ID DEVEM SER INT OU NUMBER?)
CREATE TABLE PROMOTES (
    ID_USER NUMBER,
    ID_CREW_MEMBER NUMBER,
    ID_MOVIE NUMBER NOT NULL,
    TEXT VARCHAR2(1000),
    CONSTRAINT PK_PROMOTES PRIMARY KEY (ID_USER, ID_CREW_MEMBER),
    CONSTRAINT FK_PROMOTES_USER FOREIGN KEY (ID_USER) REFERENCES USER_(ID),
    CONSTRAINT FK_PROMOTES_CREW_MEMBER FOREIGN KEY (ID_CREW_MEMBER) REFERENCES CREW_MEMBER(ID),
    CONSTRAINT FK_PROMOTES_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID)
);

--OK
CREATE TABLE FOLLOWS (
    ID_FOLLOWS NUMBER,
    ID_IS_FOLLOWED NUMBER,
    CONSTRAINT FK_FOLLOWS_USER FOREIGN KEY (ID_FOLLOWS) REFERENCES USER_(ID),
    CONSTRAINT FK_FOLLOWS_IS_FOLLOWED FOREIGN KEY (ID_IS_FOLLOWED) REFERENCES USER_(ID)
);

INSERT INTO PERSON (BIO, PICTURE) VALUES ('Aventureira ávida por descobertas e apaixonada por fotografia.', NULL);
INSERT INTO PERSON (BIO, PICTURE) VALUES ('Escritor noturno e entusiasta de café. Sempre em busca de inspiração.', NULL);
INSERT INTO PERSON (BIO, PICTURE) VALUES ('Amante da natureza e defensora dos direitos dos animais.', NULL);
INSERT INTO PERSON (BIO, PICTURE) VALUES ('Explorador urbano e amante da cultura de rua.', NULL);
INSERT INTO PERSON (BIO, PICTURE) VALUES ('Entusiasta da música clássica e chef em treinamento.', NULL);
INSERT INTO PERSON (BIO, PICTURE) VALUES ('Viajante do mundo em busca de experiências culinárias únicas.', NULL);
INSERT INTO PERSON (BIO, PICTURE) VALUES ('Gamer dedicado e colecionador de histórias em quadrinhos.', NULL);
INSERT INTO PERSON (BIO, PICTURE) VALUES ('Artista em ascensão, inspirado pelas cores da vida.', NULL);
INSERT INTO PERSON (BIO, PICTURE) VALUES ('Empreendedor social comprometido com mudanças positivas.', NULL);
INSERT INTO PERSON (BIO, PICTURE) VALUES ('Entusiasta do fitness e defensor da vida saudável.', NULL);

CREATE OR REPLACE TRIGGER user_insert_trigger
BEFORE INSERT ON USER_
FOR EACH ROW
BEGIN
    :NEW.WATCHED := 0;
END;
/

INSERT INTO FAVORITE_MOVIES (ID, FAVORITE_MOVIES) VALUES (1, 'Fast and Furious 1');
INSERT INTO FAVORITE_MOVIES (ID, FAVORITE_MOVIES) VALUES (2, 'More fast and more furious');
INSERT INTO FAVORITE_MOVIES (ID, FAVORITE_MOVIES) VALUES (3, 'Tokyo Drift');
INSERT INTO FAVORITE_MOVIES (ID, FAVORITE_MOVIES) VALUES (4, 'Fast and Furious 1');
INSERT INTO FAVORITE_MOVIES (ID, FAVORITE_MOVIES) VALUES (5, 'Fast and Furious 1');
INSERT INTO FAVORITE_MOVIES (ID, FAVORITE_MOVIES) VALUES (6, 'Fast and Furious 1');
INSERT INTO FAVORITE_MOVIES (ID, FAVORITE_MOVIES) VALUES (7, 'Fast and Furious 1');
INSERT INTO FAVORITE_MOVIES (ID, FAVORITE_MOVIES) VALUES (8, 'Fast and Furious 8');
INSERT INTO FAVORITE_MOVIES (ID, FAVORITE_MOVIES) VALUES (9, 'Fast and Furious 9');
INSERT INTO FAVORITE_MOVIES (ID, FAVORITE_MOVIES) VALUES (10, 'Fast and Furious 10');

-- INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (NULL, 'Fast and Furious 1', NULL, 'A drag race movie', 2003, 111);
-- INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (NULL, 'More fast and more furious', NULL, 'A drag race movie', 2004, 114);
-- INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (NULL, 'Tokyo Drift', NULL, 'A drag race movie', 2005, 115);
-- INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (NULL, 'Fast and Furious 4', NULL, 'A drag race movie', 2006, 116);
-- INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (NULL, 'Fast and Furious 5', NULL, 'A drag race movie', 2007, 117);
-- INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (NULL, 'Fast and Furious 6', NULL, 'A drag race movie', 2008, 118);
-- INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (NULL, 'Fast and Furious 7', NULL, 'A drag race movie', 2009, 119);
-- INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (NULL, 'Fast and Furious 8', NULL, 'A drag race movie', 2010, 120);
-- INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (NULL, 'Fast and Furious 9', NULL, 'A drag race movie', 2011, 121);
-- INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (NULL, 'Fast and Furious 10', NULL, 'A drag race movie', 2012, 122);

CREATE OR REPLACE TRIGGER calculate_average_grade
BEFORE INSERT ON MOVIE
FOR EACH ROW
BEGIN
    IF :NEW.AVERAGE_GRADE IS NULL THEN
        :NEW.AVERAGE_GRADE := 0; -- Valor padrão para média de avaliação
    END IF;
END;
/

CREATE OR REPLACE TRIGGER update_crew_counters
AFTER INSERT ON CREW_MEMBER
FOR EACH ROW
DECLARE
    v_person_id INT;
BEGIN
    -- Obter o ID da pessoa associada ao membro da equipe
    SELECT ID INTO v_person_id FROM PERSON WHERE ID = :NEW.ID;
    
    -- Incrementar os contadores apropriados baseado no papel do membro da equipe
    IF :NEW.ROLE = 'Actor' THEN
        UPDATE CREW_MEMBER SET N_ACTED = N_ACTED + 1 WHERE ID = v_person_id;
    ELSIF :NEW.ROLE = 'Director' THEN
        UPDATE CREW_MEMBER SET N_DIRECTED = N_DIRECTED + 1 WHERE ID = v_person_id;
    ELSIF :NEW.ROLE = 'Producer' THEN
        UPDATE CREW_MEMBER SET N_PRODUCED = N_PRODUCED + 1 WHERE ID = v_person_id;
    END IF;
END;
/


INSERT INTO LIST_MOVIES(DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER)
VALUES ('Action Movies', 'My Watchlist', TO_DATE('2022-02-15', 'YYYY-MM-DD'), 2);

INSERT INTO LIST_MOVIES(DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER)
VALUES ('Comedy Movies', 'My Funny List', TO_DATE('2022-03-10', 'YYYY-MM-DD'), 3);

INSERT INTO LIST_MOVIES(DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER)
VALUES ('Drama Movies', 'My Drama Collection', TO_DATE('2022-01-20', 'YYYY-MM-DD'), 4);

INSERT INTO LIST_MOVIES(DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER)
VALUES ('Sci-Fi Movies', 'Sci-Fi Faves', TO_DATE('2022-02-28', 'YYYY-MM-DD'), 5);

INSERT INTO LIST_MOVIES(DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER)
VALUES ('Romantic Movies', 'Romance Galore', TO_DATE('2022-03-05', 'YYYY-MM-DD'), 6);

INSERT INTO LIST_MOVIES(DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER)
VALUES ('Horror Movies', 'Spooky List', TO_DATE('2022-01-10', 'YYYY-MM-DD'), 7);

INSERT INTO LIST_MOVIES(DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER)
VALUES ('Thriller Movies', 'Thrill Seekers', TO_DATE('2022-03-15', 'YYYY-MM-DD'), 8);

INSERT INTO LIST_MOVIES(DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER)
VALUES ('Animated Movies', 'Cartoon Classics', TO_DATE('2022-02-20', 'YYYY-MM-DD'), 9);

INSERT INTO LIST_MOVIES(DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER)
VALUES ('Classic Movies', 'Oldies but Goldies', TO_DATE('2022-01-25', 'YYYY-MM-DD'), 10);

INSERT INTO LIST_MOVIES(DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER)
VALUES ('Documentaries', 'Knowledge Hub', TO_DATE('2022-03-18', 'YYYY-MM-DD'), 1);

INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (1, 'Action');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (2, 'Drama');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (3, 'Sitcom');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (4, 'Action');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (1, 'Sitcom');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (5, 'Action');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (6, 'Action');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (7, 'Action');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (8, 'Action');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (9, 'Action');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (10, 'Action');

INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Great movie, great action scenes', 1);
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Great movie, great action scenes', 2);
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Great movie, great action scenes', 3);
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Great movie, great action scenes', 4);
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Great movie, great action scenes', 5);
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Great movie, great action scenes', 6);
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Great movie, great action scenes', 7);
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Great movie, great action scenes', 8);
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Great movie, great action scenes', 9);
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Great movie, great action scenes', 10);

CREATE OR REPLACE TRIGGER calculate_grade_trigger
BEFORE INSERT ON WATCHES_
FOR EACH ROW
BEGIN
    IF :NEW.GRADE IS NULL THEN
        :NEW.GRADE := 0; -- Definindo um valor padrão de 0 se a grade não for especificada na inserção
    END IF;
END;
/

INSERT INTO REVIEW_ (ID_USER, ID_MOVIE, WATCH_TIME_STAMP, RVW_TIMESTAMP, TEXT, DATE_WATCHED) VALUES (1, 1, TO_TIMESTAMP('2022-03-20 20:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2022-03-21 20:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'Great movie, great action scenes', TO_DATE('2022-03-20', 'YYYY-MM-DD'));


INSERT INTO CONTAINS (ID_LIST, ID_MOVIE) VALUES (1, 1);
INSERT INTO CONTAINS (ID_LIST, ID_MOVIE) VALUES (1, 2);
INSERT INTO CONTAINS (ID_LIST, ID_MOVIE) VALUES (1, 3);
INSERT INTO CONTAINS (ID_LIST, ID_MOVIE) VALUES (2, 4);
INSERT INTO CONTAINS (ID_LIST, ID_MOVIE) VALUES (2, 5);
INSERT INTO CONTAINS (ID_LIST, ID_MOVIE) VALUES (2, 2);
INSERT INTO CONTAINS (ID_LIST, ID_MOVIE) VALUES (3, 1);
INSERT INTO CONTAINS (ID_LIST, ID_MOVIE) VALUES (3, 8);
INSERT INTO CONTAINS (ID_LIST, ID_MOVIE) VALUES (3, 9);
INSERT INTO CONTAINS (ID_LIST, ID_MOVIE) VALUES (1, 10);

INSERT INTO PLAYED_BY (ID_MOVIE, ID_CREW, ROLE_) VALUES (1, 1, 'Actor');

INSERT INTO DIRECTS (ID_MOVIE, ID_CREW) VALUES (1, 1);
INSERT INTO DIRECTS (ID_MOVIE, ID_CREW) VALUES (2, 2);

INSERT INTO PROMOTES (ID_USER, ID_CREW_MEMBER, ID_MOVIE, TEXT) VALUES (1, 1, 1, 'Great movie, great action scenes');

INSERT INTO FOLLOWS (ID_FOLLOWS, ID_IS_FOLLOWED) VALUES (1, 2);
INSERT INTO FOLLOWS (ID_FOLLOWS, ID_IS_FOLLOWED) VALUES (2, 3);