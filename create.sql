CREATE TABLE PERSON (
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    BIO VARCHAR2(1000),
    PICTURE BLOB, --blob armazena imagens
    CONSTRAINT PK_PERSON PRIMARY KEY (ID)
);

--OK
CREATE TABLE USER_ (
    ID INT,
    NICK CHAR(25),
    USER_PASSWORD CHAR(64),
    EMAIL VARCHAR2(255),
    WATCHED INT, --criar trigger
    CREATION_DATE DATE,
    CONSTRAINT PK_USER PRIMARY KEY (ID),
    CONSTRAINT FK_PERSON FOREIGN KEY (ID) REFERENCES PERSON(ID)
);

--OK
CREATE TABLE FAVORITE_MOVIES (
    ID INT,
    FAVORITE_MOVIES VARCHAR(255),
    CONSTRAINT PK_FAVORITE_MOVIES PRIMARY KEY (ID, FAVORITE_MOVIES),
    CONSTRAINT FK_FAVORITE_MOVIES_USER FOREIGN KEY (ID) REFERENCES USER_(ID)
);

--OK
CREATE TABLE CREW_MEMBER (
    ID INT,
    CREW_NAME VARCHAR2(255),
    N_ACTED NUMBER, --criar trigger
    N_DIRECTED NUMBER, --criar trigger
    N_PRODUCED NUMBER, --criar trigger
    CONSTRAINT PK_CREW_MEMBER PRIMARY KEY (ID),
    CONSTRAINT FK_CREW_MEMBER_PERSON FOREIGN KEY (ID) REFERENCES PERSON(ID)
);

--OK
CREATE TABLE LIST_MOVIES (
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    DESCRIPTION_ VARCHAR2(255),
    LIST_NAME VARCHAR2(255),
    CREATION_DATE DATE,
    ID_USER INT,
    CONSTRAINT PK_LIST PRIMARY KEY (ID),
    CONSTRAINT FK_LIST_USER FOREIGN KEY (ID_USER) REFERENCES USER_(ID)
);

--OK
CREATE TABLE MOVIE (
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    AVERAGE_GRADE NUMBER, --criar trigger
    MOVIE_NAME VARCHAR2(255),
    COVER BLOB,
    D_SYNOSPSIS VARCHAR2(1000),
    D_YEAR NUMBER(4),
    D_DURATION NUMBER,
    CONSTRAINT PK_MOVIE PRIMARY KEY (ID)
);

--OK
CREATE TABLE GENRE (
    ID INT,
    MOVIE_GENRE VARCHAR2(255),
    CONSTRAINT PK_GENRE PRIMARY KEY (ID,MOVIE_GENRE),
    CONSTRAINT FK_GENRE_MOVIE FOREIGN KEY (ID) REFERENCES MOVIE(ID)
);

--OK
CREATE TABLE CRITICS_REVIEW (
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    TEXT VARCHAR2(1000),
    ID_MOVIE INT NOT NULL UNIQUE,
    CONSTRAINT PK_CRITICS_REVIEW PRIMARY KEY (ID),
    CONSTRAINT FK_CRITICS_REVIEW_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID)
);

--OK
CREATE TABLE WATCHES_ (
    ID_MOVIE INT,
    ID_USER INT,
    TIME_STAMP TIMESTAMP,
    GRADE NUMBER, --CRIAR trigger
    CONSTRAINT PK_WATCHES PRIMARY KEY (ID_MOVIE, ID_USER, TIME_STAMP),
    CONSTRAINT FK_WATCHES_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID),
    CONSTRAINT FK_WATCHES_USER FOREIGN KEY (ID_USER) REFERENCES USER_(ID)
);

CREATE TABLE REVIEW_ (
    ID_USER NUMBER,
    ID_MOVIE NUMBER,
    WATCH_TIME_STAMP TIMESTAMP,
    RVW_TIMESTAMP TIMESTAMP,
    TEXT VARCHAR2(1000),
    DATE_WATCHED DATE,
    CONSTRAINT PK_REVIEW PRIMARY KEY (ID_USER, ID_MOVIE, WATCH_TIME_STAMP, RVW_TIMESTAMP),
    CONSTRAINT FK_REVIEW_USER FOREIGN KEY (ID_USER) REFERENCES USER_(ID),
    CONSTRAINT FK_REVIEW_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID),
    CONSTRAINT FK_REVIEW_WATCH FOREIGN KEY (ID_MOVIE, ID_USER, WATCH_TIME_STAMP) REFERENCES WATCHES_(ID_MOVIE, ID_USER, TIME_STAMP)
);

--OK
CREATE TABLE CONTAINS (
    ID_LIST INT,
    ID_MOVIE INT,
    CONSTRAINT PK_CONTAINS PRIMARY KEY (ID_LIST, ID_MOVIE),
    CONSTRAINT FK_CONTAINS_LIST FOREIGN KEY (ID_LIST) REFERENCES LIST_MOVIES(ID),
    CONSTRAINT FK_CONTAINS_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID)
);

--DUVIDA NO ROLE
CREATE TABLE PLAYED_BY (
    ID_MOVIE NUMBER,
    ID_CREW NUMBER,
    ROLE_ VARCHAR2(255),
    CONSTRAINT PK_PLAYED_BY PRIMARY KEY (ID_MOVIE, ID_CREW, ROLE_),
    CONSTRAINT FK_PLAYED_BY_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID),
    CONSTRAINT FK_PLAYED_BY_CREW FOREIGN KEY (ID_CREW) REFERENCES CREW_MEMBER(ID)
);

--DUVIDA NO DIRECTOR_ID
CREATE TABLE DIRECTS (
    ID_MOVIE NUMBER,
    ID_CREW NUMBER,
    DIRECTOR_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    CONSTRAINT PK_DIRECTS PRIMARY KEY (ID_MOVIE, ID_CREW, DIRECTOR_ID),
    CONSTRAINT FK_DIRECTS_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID),
    CONSTRAINT FK_DIRECTS_CREW FOREIGN KEY (ID_CREW) REFERENCES CREW_MEMBER(ID)
);

--OK (OS ID DEVEM SER INT OU NUMBER?)
CREATE TABLE PROMOTES (
    ID_USER NUMBER,
    ID_CREW_MEMBER NUMBER,
    ID_MOVIE NUMBER NOT NULL,
    TEXT VARCHAR2(1000),
    CONSTRAINT PK_PROMOTES PRIMARY KEY (ID_USER, ID_CREW_MEMBER),
    CONSTRAINT FK_PROMOTES_USER FOREIGN KEY (ID_USER) REFERENCES USER_(ID),
    CONSTRAINT FK_PROMOTES_CREW_MEMBER FOREIGN KEY (ID_CREW_MEMBER) REFERENCES CREW_MEMBER(ID),
    CONSTRAINT FK_PROMOTES_MOVIE FOREIGN KEY (ID_MOVIE) REFERENCES MOVIE(ID)
);

--OK
CREATE TABLE FOLLOWS (
    ID_FOLLOWS NUMBER,
    ID_IS_FOLLOWED NUMBER,
    CONSTRAINT FK_FOLLOWS_USER FOREIGN KEY (ID_FOLLOWS) REFERENCES USER_(ID),
    CONSTRAINT FK_FOLLOWS_IS_FOLLOWED FOREIGN KEY (ID_IS_FOLLOWED) REFERENCES USER_(ID)
);

-- Inserir dados na tabela PERSON
INSERT INTO PERSON (BIO, PICTURE) VALUES ('John Doe is a passionate movie enthusiast.', NULL);
INSERT INTO PERSON (BIO, PICTURE) VALUES ('Jane Smith loves watching movies in her free time.', NULL);

-- Inserir dados na tabela USER_
INSERT INTO USER_ (ID, NICK, USER_PASSWORD, EMAIL, WATCHED, CREATION_DATE) VALUES (1, 'john_doe', 'hashed_password', 'john@example.com', 0, SYSDATE);
INSERT INTO USER_ (ID, NICK, USER_PASSWORD, EMAIL, WATCHED, CREATION_DATE) VALUES (2, 'jane_smith', 'hashed_password', 'jane@example.com', 0, SYSDATE);

-- Inserir dados na tabela LIST_MOVIES
INSERT INTO LIST_MOVIES (DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER) VALUES ('Action Movies', 'Action List', SYSDATE, 1);
INSERT INTO LIST_MOVIES (DESCRIPTION_, LIST_NAME, CREATION_DATE, ID_USER) VALUES ('Romantic Movies', 'Romance List', SYSDATE, 2);

-- Inserir dados na tabela MOVIE
INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (8.5, 'Inception', NULL, 'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.', 2010, 148);
INSERT INTO MOVIE (AVERAGE_GRADE, MOVIE_NAME, COVER, D_SYNOSPSIS, D_YEAR, D_DURATION) VALUES (7.9, 'Titanic', NULL, 'A seventeen-year-old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill-fated R.M.S. Titanic.', 1997, 195);

-- Inserir dados na tabela GENRE
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (1, 'Action');
INSERT INTO GENRE (ID, MOVIE_GENRE) VALUES (2, 'Romance');

-- Inserir dados na tabela CRITICS_REVIEW
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Inception is a mind-bending masterpiece!', 1);
INSERT INTO CRITICS_REVIEW (TEXT, ID_MOVIE) VALUES ('Titanic is a timeless classic!', 2);

-- Inserir dados na tabela CREW_MEMBER
INSERT INTO CREW_MEMBER (ID, CREW_NAME, N_ACTED, N_DIRECTED, N_PRODUCED) VALUES (1, 'Christopher Nolan', 0, 1, 5);
INSERT INTO CREW_MEMBER (ID, CREW_NAME, N_ACTED, N_DIRECTED, N_PRODUCED) VALUES (2, 'James Cameron', 0, 1, 5);

-- Inserir dados na tabela DIRECTS
INSERT INTO DIRECTS (ID_MOVIE, ID_CREW) VALUES (1, 1);
INSERT INTO DIRECTS (ID_MOVIE, ID_CREW) VALUES (2, 2);

-- Inserir dados na tabela PROMOTES
INSERT INTO PROMOTES (ID_USER, ID_CREW_MEMBER, ID_MOVIE, TEXT) VALUES (1, 1, 1, 'A must-watch by Christopher Nolan!');
INSERT INTO PROMOTES (ID_USER, ID_CREW_MEMBER, ID_MOVIE, TEXT) VALUES (2, 2, 2, 'Experience the magic by James Cameron!');

-- Inserir dados na tabela FOLLOWS
INSERT INTO FOLLOWS (ID_FOLLOWS, ID_IS_FOLLOWED) VALUES (1, 2);

-- Exemplo de trigger para atualizar o número de filmes assistidos por usuário
CREATE OR REPLACE TRIGGER UPDATE_WATCHED_MOVIES
AFTER INSERT ON WATCHES_
FOR EACH ROW
BEGIN
    UPDATE USER_ 
    SET WATCHED = WATCHED + 1
    WHERE ID = :NEW.ID_USER;
END;
/

-- Exemplo de trigger para calcular a média de notas de um filme
CREATE OR REPLACE TRIGGER CALCULATE_AVERAGE_GRADE
AFTER INSERT ON REVIEW_
FOR EACH ROW
BEGIN
    UPDATE MOVIE
    SET AVERAGE_GRADE = (
        SELECT AVG(GRADE)
        FROM REVIEW_
        WHERE ID_MOVIE = :NEW.ID_MOVIE
    )
    WHERE ID = :NEW.ID_MOVIE;
END;
/
